import Connectable

import Device
import Connector
import Junction

import Infrastructure.debug as debug  
from Infrastructure.CircuitExceptions import ConnectionError

class Polarized(Connector.Connector,Device.Device):
  """ Sets an absolute voltage between two points. Like a connector, but with two distinct ends"""
  def __init__(self,*args,**kwargs):
    super(Polarized,self).__init__(*args,**kwargs)
    self.positive="positive"
    self.negative="negative"
    
    self._positiveConnection = None
    self._negativeConnection = None
    
  def connect(self,connection, polarity=None):
    """A voltage source has two special connections, +ve and negative. As such this function should never be called by anything but the end user, who should probably only call it via a helper or init function anyway"""
    if debug.debugLevel >= debug.DebugLevels.verbose:
      print "In ",self,".connect(",connection,")"
      print "\t\t",self.connections
    #Check to see if we're already connected
    if connection in self.connections:
      if debug.debugLevel >= debug.DebugLevels.verbose:
        print self,"already connected to",connection
        
        #If we're already connected to the same polarity (or if we've not been told which polarity) then assume we're ok to leave it as is. This is mainly so the reverse connection is gracefully ignored
        if ( polarity == self.positive and not self._positiveConnection is connection ) or ( polarity == self.negative and not self._negativeConnection is connection ):
          #Not just trying to reconnect, trying to short us out or . Bad times.
          raise ConnectionError("Trying to connect "+str(connection)+" to "+str(self)+", but that looks like it would be a short!")
        return
    
    if polarity is None:
      raise ConnectionError("Tried to connected to a polarized device without specifying a polarity.")
    
    #Connect directly to connections, that's the name of the game.
    if isinstance(connection, Junction.Junction):
      if polarity == self.positive:
        self._positiveConnection=connection
      elif polarity == self.negative:
        self._negativeConnection = connection
      else:
        raise ValueError(str(self)+"doesn't have a polarity \""+str(polarity)+"\".")
      
      #Also maintain the standard connection system
      self.connections.add(connection)
      connection.connect(self)
      return
    
    #We can connect to other Connectors, but we need to create a junction at which to do so
    if isinstance(connection, Connector.Connector):
      junc=Junction.Junction(name="AutoGeneratedJunction")
      connection.connect(junc)
      self.connect(junc,polarity)
      return
    #If we reach this point then we haven't known how to connect to whatever it is, which means either somebody is trying to do something really weird, or we just haven't implemented that yet
    raise NotImplementedError( "Don't know how to add a connection from "+str(connection)+" to "+str(self) )
